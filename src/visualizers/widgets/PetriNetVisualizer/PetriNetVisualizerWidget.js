/*globals define, WebGMEGlobal*/

/**
 * Generated by VisualizerGenerator 1.7.0 from webgme on Fri Nov 13 2020 19:12:59 GMT-0600 (Central Standard Time).
 */

define(['jointjs', 'css!./styles/PetriNetVisualizerWidget.css', 'css!jointjscss'], function (jointjs) {
    
        'use strict';

        var WIDGET_CLASS = 'petri-net-visualizer';

        // default widget 
        function PetriNetVisualizerWidget(logger, container) {
            console.log(jointjs); // check whats going on
            this._logger = logger.fork('Widget');
            this._el = container;
            this.nodes = {};
            this._initialize();
            this._logger.debug('ctor finished');
        }

        PetriNetVisualizerWidget.prototype._initialize = function () {
            // var width = this._el.width(),
            //     height = this._el.height(),
            //     self = this;


            // // set widget class
            this._el.addClass(WIDGET_CLASS);

            this._graph = new jointjs.dia.Graph();
            this._paper = new jointjs.dia.Paper({
                el: $(this._el),
                width: 300,
                height: 300,
                gridSize: 10,
                defaultAnchor: { name: 'perpendicular'},
                defaultConnectionPoint: { name: 'boundary'},
                model: this._graph
            });

            this._el.append(this._paper);

            this._paper.setInteractivity(true);

            var pn = jointjs.shapes.pn;

            var p1 =  new pn.Place({
            position: {x: 100, y: 100},
            attrs: {
                '.label': {
                    'text': 'p1',
                    'fill': '#7c68fc' },
                '.root': {
                    'stroke': '#9586fd',
                    'stroke-width': 3
                },
                '.tokens > circle': {
                    'fill': '#7a7e9b'
                }
            },
            tokens: 1
            });

            var p2 = p1.clone()
                .attr('.label/text', 'p2')
                .position(140, 100)
                .set('tokens', 8);

            var p3 = p1.clone()
                .attr('.label/text', 'p3')
                .position(160, 100)
                .set('tokens', 18);

            var t1 = new pn.Transition({
                position: {x:200, y:160}, 
                attrs: {
                    '.label': {
                        'text':'t1',
                        'fill': '#fe854f'
                    },
                    '.root': {
                        'fill': '#9586fd',
                        'stroke': '#9586fd'
                    }
                }
            });

            var t2 = t1.clone()
                .attr('.label/text', 't2')
                .position(200, 260);

            function addLink(src, dst) {
                return new pn.Link({
                    source: { id: src.id, selector: '.root'},
                    target: { id: dst.id, selector: '.root'},
                    attrs: {
                        '.connection': {
                            'fill':'none',
                            'stroke-linejoin':'round',
                            'stroke-with':'2',
                            'stroke':'#4b4a67'
                        }
                    }

                });
            }

            this._graph.addCell([p1, p2, p3, t1, t2]);
            this._graph.addCell([
                addLink(p1, t2),
                addLink(t1, p1),
                addLink(p2, t1),
                addLink(t2, p2),
                addLink(t2, p3),
                addLink(p3, t1)
            ]);
        };


          
            // // Create a dummy header
            // this._el.append('<h3>PetriNetVisualizer Events:</h3>');

            // // Registering to events can be done with jQuery (as normal)
            // this._el.on('dblclick', function (event) {
            //     event.stopPropagation();
            //     event.preventDefault();
            //     self.onBackgroundDblClick();
        PetriNetVisualizerWidget.prototype.onWidgetContainerResize = function (width, height) {
            this._logger.debug('Widget is resizing...');
        };

        // Adding/Removing/Updating items
        // PetriNetVisualizerWidget.prototype.addNode = function (desc) {
        //     if (desc) {
        //         // Add node to a table of nodes
        //         var node = document.createElement('div'),
        //             label = 'children';

        //         if (desc.childrenIds.length === 1) {
        //             label = 'child';
        //         }

        //         this.nodes[desc.id] = desc;
        //         node.innerHTML = 'Adding node "' + desc.name + '" (click to view). It has ' +
        //             desc.childrenIds.length + ' ' + label + '.';

        //         this._el.append(node);
        //         node.onclick = this.onNodeClick.bind(this, desc.id);
        //     }
        // };

        // PetriNetVisualizerWidget.prototype.removeNode = function (gmeId) {
        //     var desc = this.nodes[gmeId];
        //     this._el.append('<div>Removing node "' + desc.name + '"</div>');
        //     delete this.nodes[gmeId];
        // };

        // PetriNetVisualizerWidget.prototype.updateNode = function (desc) {
        //     if (desc) {
        //         this._logger.debug('Updating node:', desc);
        //         this._el.append('<div>Updating node "' + desc.name + '"</div>');
        //     }
        // };

         /* * * * * * * * Visualizer event handlers * * * * * * * */

        // PetriNetVisualizerWidget.prototype.onNodeClick = function (/*id*/) {
        //     // This currently changes the active node to the given id and
        //     // this is overridden in the controller.
        // };

        // PetriNetVisualizerWidget.prototype.onBackgroundDblClick = function () {
        //     this._el.append('<div>Background : double-clicked!!</div>');
        // };
       

        /* * * * * * * * Visualizer life cycle callbacks * * * * * * * */
        PetriNetVisualizerWidget.prototype.destroy = function () {
        };

        PetriNetVisualizerWidget.prototype.onActivate = function () {
            this._logger.debug('PetriNetVisualizerWidget has been activated');
        };

        PetriNetVisualizerWidget.prototype.onDeactivate = function () {
            this._logger.debug('PetriNetVisualizerWidget has been deactivated');
        };

    return PetriNetVisualizerWidget;
});
